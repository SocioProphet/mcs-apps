version: 2.1
jobs:
  kg-app-docker:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build
          command: |
            docker-compose -f app/kg/docker-compose.yml -f db/neo4j/docker-compose.yml build
      - run:
          name: Run
          background: true
          command: |
            docker-compose -f db/neo4j/docker-compose.yml -f app/kg/docker-compose.yml up --abort-on-container-exit
      - run:
          name: Wait for the server to start
          command: |
            sleep 120
            docker exec mcs-kg-app curl --retry 10 --retry-connrefused -s http://localhost:9000
            docker exec mcs-kg-gui curl --retry 10 --retry-connrefused -s http://localhost
      - run:
          name: Load the database
          command: |
            bzip2 -dc conf/data/test/kg/edges.csv.bz2 >conf/data/test/kg/edges.csv
            bzip2 -dc conf/data/test/kg/nodes.csv.bz2 >conf/data/test/kg/nodes.csv
            # Can't do volume mounts in CircleCI Docker, so have to copy
            docker cp conf/data/test/kg/ mcs-kg-app:/app/data/import/
            app/kg/script/import-cskg-nodes
            sleep 60
            app/kg/script/import-cskg-edges
      - run:
          name: Test that the database is loaded
          command: |
            # Copy a file in in order to use -f
            # If we cat the Cypher into the docker exec then the cypher-shell doesn't print anything.
            echo "MATCH (n) RETURN COUNT(n);" >test-neo4j.cypher
            docker cp test-neo4j.cypher mcs-neo4j:/var/lib/neo4j
            docker exec --interactive mcs-neo4j cypher-shell -u neo4j -p nC1aB4mji623s2Zs --non-interactive -f test-neo4j.cypher
      - run:
          name: Test that the user interface is up
          command: |
            docker exec mcs-kg-gui curl --retry 5 --retry-connrefused http://localhost &>/dev/null
  scala:
    docker:
      - image: circleci/openjdk:11
      - image: neo4j:4.0.4
        name: mcs-neo4j
        environment:
          NEO4J_AUTH: neo4j/nC1aB4mji623s2Zs
          NEO4JLABS_PLUGINS: '["apoc"]'
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - restore_cache:
          key: sbt-cache-v1
      - run:
          name: Build and test
          command: |
            cp -p -R /tmp/workspace/dist/kg-gui app/kg/public
            sbt test playUpdateSecret dist
            mkdir -p test-reports
            cp -p -R app/benchmark/target/test-reports test-reports/benchmark-app
            cp -p -R app/kg/target/test-reports test-reports/kg-app
            cp -p -R lib/scala/benchmark/target/test-reports test-reports/benchmark-lib
            cp -p -R lib/scala/kg/target/test-reports test-reports/kg-lib
            cd app/benchmark/target/universal && unzip -qq mcs-benchmark-app*.zip && rm mcs-benchmark-app*.zip && mkdir ~/dist && mv mcs-benchmark-app-*-SNAPSHOT ~/dist/benchmark-app
            cd ~/project/app/kg/target/universal && unzip -qq mcs-kg-app*.zip && rm mcs-kg-app*.zip && mkdir ~/dist && mv mcs-kg-app-*-SNAPSHOT ~/dist/kg-app
      - store_test_results:
          path: test-reports
      - persist_to_workspace:
          root: ~/
          paths:
            - dist/benchmark-app
            - dist/kg-app
      - save_cache:
          key: sbt-cache-v1
          paths:
            - "~/.ivy2/cache"
            - "~/.m2"
            - "~/.sbt"
  ts:
    working_directory: ~/project
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - restore_cache:
          key: ts-dependency-cache-v2-{{ checksum "app/kg/gui/package.json" }}
      - run:
          name: Install dependencies
          command: |
            cd app/kg/gui
            npm install
      - save_cache:
          key: ts-dependency-cache-v2-{{ checksum "app/kg/gui/package.json" }}
          paths:
            - app/kg/gui/node_modules
      - run:
          name: Build
          command: |
            cd app/kg/gui
            npm run build
            mkdir ~/dist
            mv dist ~/dist/kg-gui
      - persist_to_workspace:
          root: ~/
          paths:
            - dist/kg-gui
orbs:
  cypress: cypress-io/cypress@1
  slack: circleci/slack@3.4.2
workflows:
  version: 2
  kg-app:
    jobs:
      - cypress/install:
          cache-key: 'npm-packages-v2-{{ arch }}-{{ checksum "app/kg/test/integration/package.json" }}'
          requires:
            - scala
          working_directory: app/kg/test/integration
          post-steps:
            - slack/status:
                fail_only: true
      - cypress/run:
          attach-workspace: true
          cache-key: 'npm-packages-v2-{{ arch }}-{{ checksum "app/kg/test/integration/package.json" }}'
          post-steps:
            - store_test_results:
                path: app/kg/test/integration/results
            - store_artifacts:
                path: app/kg/test/integration/cypress/screenshots
            - store_artifacts:
                path: app/kg/test/integration/cypress/videos
            - slack/status
          requires:
            - cypress/install
          start: |
            pwd
            cp ~/project/.circleci/cypress.json .
            apt-get update && apt-get install -y default-jre
            cd ~/dist/kg-app
            bin/mcs-kg-app -DtestIntegration
          wait-on: "http-get://localhost:9000/index.html"
          working_directory: app/kg/test/integration
      - kg-app-docker:
          filters:
            branches:
              only: master
          post-steps:
            - slack/status
      - scala:
          requires:
            - ts
          post-steps:
            - slack/status:
                fail_only: true
      - ts:
          post-steps:
            - slack/status:
                fail_only: true
