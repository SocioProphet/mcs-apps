version: 2.1
jobs:
  etl-py:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - restore_cache:
          keys:
            - pip_cache-{{ checksum "etl/requirements.txt" }}
            - pip_cache
      - run:
          name: Install mandatory dependencies
          command: pip install -r etl/requirements.txt
      - run:
          name: Run tests without optional dependencies
          command: |
            cd etl
            mkdir test-results
            # In a stable build results will be overwritten by the run with optional dependencies,
            # but if one of these tests fails, we still want them.
            pytest --junitxml=test-results/junit.xml
      - run:
          name: Install optional dependencies
          command: |
            pip install bsddb3 plyvel
      - save_cache:
          paths:
            - ~/.cache/pip
          key: pip_cache-{{ checksum "etl/requirements.txt"}}
      - run:
          name: Run tests with optional dependencies
          command: |
            cd etl
            pytest --junitxml=test-results/junit.xml
      - store_test_results:
          path: test-results
      - restore_cache:
          keys:
            - etl-data-{{ checksum "etl/mowgli_etl/pipeline/rpi_combined/rpi_combined_pipeline.py" }}
      - run:
          name: Generate RPI combined CSKG CSV (master branch only)
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              cd etl
              mkdir -p cskg
              python -m mowgli_etl.cli etl rpi_combined --data-dir-path cskg
            fi
      #      - run:
      #          name: Generate RPI combined CSKG RDF (master branch only)
      #          command: |
      #            if [ "${CIRCLE_BRANCH}" == "master" ]; then
      #              python3 -m mowgli_etl.cli etl rdf --data-dir-path cskg --nodes-csv-file-path cskg/rpi_combined/loaded/nodes.csv --edges-csv-file-path cskg/rpi_combined/loaded/edges.csv --pipeline-id rpi-combined-rdf
      #            fi
      - save_cache:
          key: etl-data-{{ checksum "etl/mowgli_etl/pipeline/rpi_combined/rpi_combined_pipeline.py" }}
          paths:
            - etl/cskg/extracted
      - run:
          name: Archive artifacts (master branch only)
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              cd etl/cskg
              for dir in `ls`; do
                mv "$dir/loaded/"*.csv "$dir/" || true
                mv "$dir/loaded/"*.trig "$dir/" || true
                mv "$dir/loaded/"*.ttl "$dir/" || true
                rm -fr "$dir/extracted" "$dir/transformed" "$dir/loaded"
              done
              cd ..
              tar -cvjSf cskg.tar.bz2 cskg
            else
              touch cskg.tar.bz2
            fi
      - run:
          name: Upload CSKG to Drive (master branch only)
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              cd etl
              service_file_path="service_file_key.json"
              cat \<<< "$GCLOUD_SERVICE_KEY" > "$service_file_path"
              python3 -m mowgli_etl.cli drive-upload --file-path=cskg.tar.bz2  --file-id="$CSKG_FILE_ID" --service-account-file="$service_file_path"
            fi
      - store_artifacts:
          path: cskg.tar.bz2
  gui-docker:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build
          command: |
            cd gui
            docker-compose build
      - run:
          name: Run
          background: true
          command: |
            cd gui
            docker-compose up --abort-on-container-exit
      - run:
          name: Wait for the server to start
          command: |
            sleep 60
      - run:
          name: Bootstrap the database
          command: |
            cd gui
            script/bootstrap-neo4j
      - run:
          name: Load the database
          command: |
            cd gui
            bzip2 -d -f conf/test_data/edges.csv.bz2 > conf/test_data/edges.csv
            bzip2 -d -f conf/test_data/nodes.csv.bz2 > conf/test_data/nodes.csv
            # Can't do volume mounts in CircleCI Docker, so have to copy
            docker cp conf/test_data/edges.csv neo4j:/var/lib/neo4j/import/edges.csv
            docker cp conf/test_data/nodes.csv neo4j:/var/lib/neo4j/import/nodes.csv
            rm conf/test_data/*.csv
            script/load-neo4j
      - run:
          name: Test that the database is loaded
          command: |
            cd gui
            # Copy a file in in order to use -f
            # If we cat the Cypher into the docker exec then the cypher-shell doesn't print anything.
            echo "MATCH (n) RETURN COUNT(n);" >test-neo4j.cypher
            docker cp test-neo4j.cypher neo4j:/var/lib/neo4j
            docker exec --interactive neo4j cypher-shell -u neo4j -p nC1aB4mji623s2Zs --non-interactive -f test-neo4j.cypher
      - run:
          name: Test that the user interface is up
          command: |
            docker exec mowgli-gui-gui curl --retry 5 --retry-connrefused http://localhost &>/dev/null
  gui-scala:
    docker:
      - image: circleci/openjdk:11
      - image: neo4j:4.0.4
        name: neo4j
        environment:
          NEO4J_AUTH: neo4j/nC1aB4mji623s2Zs
          NEO4JLABS_PLUGINS: '["apoc"]'
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - restore_cache:
          key: sbt-cache-v1
      # Can't call docker-exec on secondary images.
      #      - run:
      #          name: Bootstrap neo4j
      #          command: |
      #            gui/script/bootstrap-neo4j
      - run:
          name: Build and test
          command: |
            cp -p -R /tmp/workspace/dist/gui-gui gui/public
            sbt test "project guiApp" playUpdateSecret dist
            cd gui/target/universal && unzip -qq mowgli-gui-app*.zip && rm mowgli-gui-app*.zip && mkdir ~/dist && mv mowgli-gui-app-*-SNAPSHOT ~/dist/gui-app
      - store_test_results:
          path: gui/target/test-reports
      - persist_to_workspace:
          root: ~/
          paths:
            - dist/gui-app
      - save_cache:
          key: sbt-cache-v1
          paths:
            - "~/.ivy2/cache"
            - "~/.m2"
            - "~/.sbt"
  gui-ts:
    working_directory: ~/project
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - restore_cache:
          key: ts-dependency-cache-v1-{{ checksum "gui/gui/package.json" }}
      - run:
          name: Install dependencies
          command: |
            cd gui/gui
            npm install
      - save_cache:
          key: ts-dependency-cache-v1-{{ checksum "gui/gui/package.json" }}
          paths:
            - gui/gui/node_modules
      - run:
          name: Build
          command: |
            cd gui/gui
            npm run build
            mkdir ~/dist
            mv dist ~/dist/gui-gui
      - persist_to_workspace:
          root: ~/
          paths:
            - dist/gui-gui
orbs:
  cypress: cypress-io/cypress@1
workflows:
  version: 2
  etl:
    jobs:
      - etl-py
  gui:
    jobs:
      - cypress/install:
          cache-key: 'npm-packages-v2-{{ arch }}-{{ checksum "gui/test/integration/package.json" }}'
          requires:
            - gui-scala
          working_directory: gui/test/integration
      - cypress/run:
          attach-workspace: true
          cache-key: 'npm-packages-v2-{{ arch }}-{{ checksum "gui/test/integration/package.json" }}'
          post-steps:
            - store_test_results:
                path: gui/test/integration/results
            - store_artifacts:
                path: gui/test/integration/cypress/screenshots
            - store_artifacts:
                path: gui/test/integration/cypress/videos
          requires:
            - cypress/install
          start: |
            pwd
            cp ~/project/.circleci/cypress.json .
            apt-get update && apt-get install -y default-jre
            cd ~/dist/gui-app
            bin/mowgli-gui-app -DtestIntegration
          wait-on: "http-get://localhost:9000/index.html"
          working_directory: gui/test/integration
      - gui-docker:
          filters:
            branches:
              only: master
      - gui-scala:
          requires:
            - gui-ts
      - gui-ts
